module Babelish
  class XcodeMacros
    attr_accessor :content, :table, :keys
    def initialize(table = "Localizable", keys = {})
      @content = ""
      @table = table
      @keys = keys
    end

    def self.write_macros(file_path, table, keys)
      instance = XcodeMacros.new
      instance.process(table, keys)
      instance.write_content(file_path)
    end

    def process(table, keys)
      keys.each do |key|
        macro_name = "LS_#{key.upcase}" 
        macro_name += "_#{table.upcase}" if table != "Localizable" 
        macro_name.gsub!(' ', '')
        macro_name.gsub!('.', '_')
        macro_name.gsub!('-', '_')
        @content << String.new(<<-EOS)
#define #{macro_name} NSLocalizedStringFromTable(@"#{key}",@"#{table}",@"")
        EOS
      end
      @content
    end

    def write_content(file_path)
      header = String.new(<<-EOS)
//
//  file_path
//  
//  This file was generated by Babelish
//  
//  https://github.com/netbe/babelish
//
        EOS
      header.gsub! "file_path", File.basename(file_path)
      file = File.new(file_path, "w")
      file.write header + @content
      file.close
    end
  end
end
